# -*- coding: utf-8 -*-
"""THE_INFERENCE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hRbMT6kQHpMRDnNRmi4K6rrGEVBwBxy2
"""

load("/content/Cuisine_dict_with_ratings.RData")
load("/content/Cuisine_dictionary.RData")
load("/content/realMatrix.RData")
load("/content/realRatingMatrix.RData")

install.packages("recommenderlab", quiet = TRUE)
install.packages("hash", quiet = TRUE)
library(recommenderlab)
library(hash)

ls()

realRatingMatrix

model = Recommender(data=realRatingMatrix, method="IBCF", parameter = list(method = "cosine"))

get_recommendations <- function(area_cuisine, realMatrix, model, cuisine_dict_with_ratings, cuisine_dict) {
  selected_row <- realMatrix[area_cuisine, ]
  non_na_indices <- which(!is.na(selected_row))
  non_na_column_names <- colnames(realMatrix)[non_na_indices]
  dish_averages <- list()
  dish_columns <- list()

  for (dish in non_na_column_names) {
    selected_col <- realMatrix[, dish]
    non_na_indices <- which(!is.na(selected_col))
    non_na_ratings <- selected_col[non_na_indices]
    average_rating <- sum(non_na_ratings) / length(non_na_ratings)
    dish_and_average <- c(dish, average_rating)
    dish_averages <- c(dish_averages, list(dish_and_average))
    dish_columns <- c(dish_columns, list(selected_col))
  }

  dish_averages <- dish_averages[order(unlist(lapply(dish_averages, function(x) as.numeric(x[2]))), decreasing = TRUE)]

  dish_cols <- do.call(cbind, dish_columns)
  colnames(dish_cols) <- non_na_column_names

  num_cols_in_model <- ncol(realMatrix)
  dish_col_ratings <- matrix(NA, nrow = nrow(dish_cols), ncol = num_cols_in_model)
  colnames(dish_col_ratings) <- colnames(realMatrix)
  dish_col_ratings[, non_na_column_names] <- dish_cols
  dish_col_ratings <- as(dish_col_ratings, "realRatingMatrix")
  recommendations <- predict(model, newdata = dish_col_ratings, n = 10)
  recs <- as(recommendations, "list")
    selected_row_index <- which(row.names(realMatrix) == area_cuisine)
    selected_row_index_str <- as.character(selected_row_index - 1)
    ibcf_recs = recs[[selected_row_index_str]]
    refined_recs = c()
    cut.POSIXt

    h = hash()
    h[["search_recommendations"]] = dish_averages
    h[["ibcf_recommendations"]] =

    return(h)
}

get_recommendations <- function(area_cuisine, realMatrix, model, cuisine_dict_with_ratings, cuisine_dict) {

  h <- hash()

  if (!(area_cuisine %in% rownames(realMatrix))) {
    area_cuisine_parts <- strsplit(area_cuisine, ",")[[1]]
    cuisine <- trimws(area_cuisine_parts[3])
    cuisine_dish_list <- cuisine_dict_with_ratings[[cuisine]]
    if (length(cuisine_dish_list) > 5) {
      h[["search_recommendations"]] <- cuisine_dish_list[1:5]
      h[["ibcf_recommendations"]] <- c("")
      return(h)
    } else {
      len_cuisines <- length(cuisine_dish_list)
      h[["search_recommendations"]] <- cuisine_dish_list
      new_cuisines <- cuisine_dict[[cuisine]]
      ibcf_rec_list <- c()
      while (length(ibcf_rec_list) + len_cuisines < 5) {
        random_dish <- sample(new_cuisines, 1)
        ibcf_rec_list <- c(ibcf_rec_list, random_dish)
      }
      h[["ibcf_recommendations"]] <- ibcf_rec_list
      return(h)
    }
  }

  selected_row <- realMatrix[area_cuisine, ]
  non_na_indices <- which(!is.na(selected_row))
  non_na_column_names <- colnames(realMatrix)[non_na_indices]
  dish_averages <- list()
  dish_columns <- list()

  for (dish in non_na_column_names) {
    selected_col <- realMatrix[, dish]
    non_na_indices <- which(!is.na(selected_col))
    non_na_ratings <- selected_col[non_na_indices]
    average_rating <- mean(non_na_ratings)
    dish_and_average <- c(dish, average_rating)
    dish_averages <- c(dish_averages, list(dish_and_average))
    dish_columns <- c(dish_columns, list(selected_col))
  }

  dish_averages <- dish_averages[order(unlist(lapply(dish_averages, function(x) as.numeric(x[2]))), decreasing = TRUE)]

  dish_cols <- do.call(cbind, dish_columns)
  colnames(dish_cols) <- non_na_column_names

  num_cols_in_model <- ncol(realMatrix)
  dish_col_ratings <- matrix(NA, nrow = nrow(dish_cols), ncol = num_cols_in_model)
  colnames(dish_col_ratings) <- colnames(realMatrix)
  dish_col_ratings[, non_na_column_names] <- dish_cols
  dish_col_ratings <- as(dish_col_ratings, "realRatingMatrix")
  recommendations <- predict(model, newdata = dish_col_ratings, n = 10)
  recs <- as(recommendations, "list")
  selected_row_index <- which(row.names(realMatrix) == area_cuisine)
  selected_row_index_str <- as.character(selected_row_index - 1)
    area_cuisine_parts <- strsplit(area_cuisine, ",")[[1]]
    cuisine <- trimws(area_cuisine_parts[3])
    cuisine_dish_list <- cuisine_dict[[cuisine]]
    ibcf_recs = recs[[selected_row_index_str]]
    # print(ibcf_recs)
    # cat("\n\n")
    # print(cuisine_dish_list)
    refined_recs = c()
    for (rec in ibcf_recs) {
        if (rec %in% cuisine_dish_list) {
        refined_recs <- c(refined_recs, rec)
    }
}

    # cat("\n\n")
    # print(refined_recs)

  h[["search_recommendations"]] <- dish_averages
  h[["ibcf_recommendations"]] <- refined_recs

  return(h)
}

get_recommendations("Agra, Agra Cantt,  North Indian", realMatrix, model, cuisine_dict_with_ratings, cuisine_dict)